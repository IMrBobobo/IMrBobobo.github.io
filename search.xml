<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Markdown语法学习</title>
      <link href="/2020/08053969.html"/>
      <url>/2020/08053969.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言（基本摘自菜鸟教程）"><a href="#前言（基本摘自菜鸟教程）" class="headerlink" title="前言（基本摘自菜鸟教程）"></a>前言（基本摘自菜鸟教程）</h2><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档。</p><p>Markdown 语言在 2004 由约翰·格鲁伯（英语：John Gruber）创建。</p><p>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。</p><p>Markdown 编写的文档后缀为 <strong>.md</strong>, <strong>.markdown</strong>。</p><p>采用软件：Typora(软件官网：<a href="https://typora.io/">https://typora.io/</a>)   </p><p><strong><em>鉴于本人不太可能长期活跃于博客创作，对于Markdown语法可能时有遗忘，以此文章来便于查阅。</em></strong></p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><h2 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题</h2><h3 id="1-1使用-和-标记一级和二级标题"><a href="#1-1使用-和-标记一级和二级标题" class="headerlink" title="1.1使用 = 和 - 标记一级和二级标题"></a>1.1使用 = 和 - 标记一级和二级标题</h3><p>= 和 - 标记语法格式如下：</p><pre><code>我展示的是一级标题=================我展示的是二级标题-----------------</code></pre><h3 id="1-2使用-号标记"><a href="#1-2使用-号标记" class="headerlink" title="1.2使用#号标记"></a>1.2使用#号标记</h3><p>使用#号可标记1-6级标题，一级标题对应一个#号，二级标题对应两个#号，以此类推。</p><pre><code># 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题![img](https://www.runoob.com/wp-content/uploads/2019/03/md2.gif)</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md2.gif" alt="img">  </p><h2 id="2、段落"><a href="#2、段落" class="headerlink" title="2、段落"></a>2、段落</h2><h3 id="2-1段落"><a href="#2-1段落" class="headerlink" title="2.1段落"></a>2.1段落</h3><p>Markdown 段落没有特殊的格式，直接编写文字就好，<strong>段落的换行是使用两个以上空格加上回车</strong>。 </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/36A89BDA-A062-4D66-A41B-0EBEE7891AB9.jpg" alt="img"> </p><h3 id="2-2字体"><a href="#2-2字体" class="headerlink" title="2.2字体"></a>2.2字体</h3><p>Markdown 可以使用以下几种字体： </p><pre><code>*斜体文本*_斜体文本_**粗体文本**__粗体文本__***粗斜体文本***___粗斜体文本___</code></pre><p>显示效果如下所示： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md3.gif" alt="img"> </p><h3 id="2-3分割线"><a href="#2-3分割线" class="headerlink" title="2.3分割线"></a>2.3分割线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线： </p><pre><code>**** * ******- - -----------</code></pre><p>显示效果如下所示： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/3F46EAA9-DADE-48FD-99AA-DF7BEBFAA4FA.jpg" alt="img"> </p><h3 id="2-4删除线"><a href="#2-4删除线" class="headerlink" title="2.4删除线"></a>2.4删除线</h3><p>如果段落上的文字要添加删除线，只需要在文字的两端加上两个波浪线~~即可，实例如下： </p><pre><code>RUNOOB.COMGOOGLE.COM~~BAIDU.COM~~</code></pre><p>显示效果如下所示： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/B5270A31-15D0-410B-AE1D-B9655B8F331C.jpg" alt="img"> </p><h3 id="2-5下划线"><a href="#2-5下划线" class="headerlink" title="2.5下划线"></a>2.5下划线</h3><p>下划线可以通过 HTML 的<u>标签来实现： </u></p><u><pre><code>&lt;u&gt;带下划线文本&lt;/u&gt;</code></pre><p>显示效果如下所示： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/05A27273-B66D-43DE-A3DB-0D32FF024093.jpg" alt="img"> </p><h3 id="2-6脚注"><a href="#2-6脚注" class="headerlink" title="2.6脚注"></a>2.6脚注</h3><p>脚注是对文本的补充说明。</p><p>Markdown 脚注的格式如下: </p><pre><code>[^要注明的文本]</code></pre><p>以下实例演示了脚注的用法： </p><pre><code>创建脚注格式类似这样 [^RUNOOB]。[^RUNOOB]: 菜鸟教程 -- 学的不仅是技术，更是梦想！！！</code></pre><p>演示效果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/md5.gif" alt="img"></p><h2 id="3、列表"><a href="#3、列表" class="headerlink" title="3、列表"></a>3、列表</h2><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号(<strong>***)、加号(</strong>+<strong>)或是减号(</strong>-**)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：      </p><pre><code>* 第一项* 第二项* 第三项+ 第一项+ 第二项+ 第三项- 第一项- 第二项- 第三项</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/89446A8E-6D83-4666-AACC-980145D5F070.jpg" alt="img"> </p><p>有序列表使用数字并加上 <strong>.</strong> 号来表示，如： </p><pre><code>1. 第一项2. 第二项3. 第三项</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/560384BB-2B00-41D5-ACF2-18972F7F2775.jpg" alt="img"> </p><h3 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h3><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><pre><code>1. 第一项：    - 第一项嵌套的第一个元素    - 第一项嵌套的第二个元素2. 第二项：    - 第二项嵌套的第一个元素    - 第二项嵌套的第二个元素</code></pre><p>显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/8ED795DA-F124-4E70-BA71-57CD9CF958A4.jpg" alt="img"> </p><h2 id="4、区块"><a href="#4、区块" class="headerlink" title="4、区块"></a>4、区块</h2><h3 id="4-1用法"><a href="#4-1用法" class="headerlink" title="4.1用法"></a>4.1用法</h3><p>Markdown 区块引用是在段落开头使用 <strong>&gt;</strong> 符号 ，然后后面紧跟一个<strong>空格</strong>符号： </p><pre><code>&gt; 区块引用&gt; 菜鸟教程&gt; 学的不仅是技术更是梦想</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/DFE1124E-BC38-4C12-B7AC-053E560D4C9C.jpg" alt="img"> </p><p>另外区块是可以嵌套的，一个 <strong>&gt;</strong> 符号是最外层，两个 <strong>&gt;</strong> 符号是第一层嵌套，以此类推： </p><pre><code>&gt; 最外层&gt; &gt; 第一层嵌套&gt; &gt; &gt; 第二层嵌套</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/AA0A4A6A-33A7-48C7-971F-73FFC8FE85B0.jpg" alt="img"> </p><h3 id="4-2区块中使用列表"><a href="#4-2区块中使用列表" class="headerlink" title="4.2区块中使用列表"></a>4.2区块中使用列表</h3><p>区块中使用列表实例如下： </p><pre><code>&gt; 区块中使用列表&gt; 1. 第一项&gt; 2. 第二项&gt; + 第一项&gt; + 第二项&gt; + 第三项</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/E3BF6399-6483-4C7A-8502-AE75E8D66C96.jpg" alt="img"> </p><h3 id="4-3列表中使用区块"><a href="#4-3列表中使用区块" class="headerlink" title="4.3列表中使用区块"></a>4.3列表中使用区块</h3><p>如果要在列表项目内放进区块，那么就需要在 <strong>&gt;</strong> 前添加四个空格的缩进。</p><p>区块中使用列表实例如下： </p><pre><code>* 第一项    &gt; 学习    &gt; 学的不仅是技术更是梦想* 第二项</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/1B894FB4-53AC-4E2D-BA30-F4AE4DFA8B97.jpg" alt="img"> </p><h2 id="5、代码"><a href="#5、代码" class="headerlink" title="5、代码"></a>5、代码</h2><h3 id="5-1用法"><a href="#5-1用法" class="headerlink" title="5.1用法"></a>5.1用法</h3><p>如果是段落上的一个函数或片段的代码可以用反引号把它包起来（<strong>`</strong>），例如：   </p><pre><code>`printf()` 函数</code></pre><p>显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/C928FDA3-E0A7-4AFF-AB2A-B3AF44F93DF9.jpg" alt="img"> </p><h3 id="5-2代码区块"><a href="#5-2代码区块" class="headerlink" title="5.2代码区块"></a>5.2代码区块</h3><p>代码区块使用 <strong>4 个空格</strong>或者一个<strong>制表符（Tab 键）</strong>。</p><p>实例如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/55EDFE05-5F27-458E-AFE0-7B96685C9603.jpg" alt="img"> </p><p>显示结果如下： </p><p>也可以用 <strong>```</strong> 包裹一段代码，并指定一种语言（也可以不指定）：    </p><pre><code>​```javascript$(document).ready(function () &amp;#123;    alert('RUNOOB');&amp;#125;);​```</code></pre><p>显示结果如下：</p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/88F52386-2F98-4D7E-8935-E43BECA6D868.jpg" alt="img"> </p><h2 id="6、链接"><a href="#6、链接" class="headerlink" title="6、链接"></a>6、链接</h2><h3 id="6-1基础用法"><a href="#6-1基础用法" class="headerlink" title="6.1基础用法"></a>6.1基础用法</h3><p>链接使用方法如下： </p><pre><code>[链接名称](链接地址)或者&lt;链接地址&gt;</code></pre><p>例如： </p><pre><code>这是一个链接 [IMrBobobo](https://imrbobobo.top/)</code></pre><p>或者直接使用链接地址： </p><pre><code>&lt;https://imrbobobo.top/&gt;</code></pre><h3 id="6-2高级链接（这个本人基本用不上，所以省略）"><a href="#6-2高级链接（这个本人基本用不上，所以省略）" class="headerlink" title="6.2高级链接（这个本人基本用不上，所以省略）"></a>6.2高级链接（这个本人基本用不上，所以省略）</h3><h2 id="7、图片"><a href="#7、图片" class="headerlink" title="7、图片"></a>7、图片</h2><p>Markdown 图片语法格式如下： </p><pre><code>![alt 属性文本](图片地址)![alt 属性文本](图片地址 "可选标题")</code></pre><ul><li>开头一个感叹号 !</li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。 </li></ul><p>当然，也可以像网址那样对图片网址使用变量: </p><pre><code>这个链接用 1 作为网址变量 [IMrBobobo][1].然后在文档的结尾为变量赋值（网址）</code></pre><pre><code>[1]: https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/head.jpg</code></pre><h2 id="8、表格"><a href="#8、表格" class="headerlink" title="8、表格"></a>8、表格</h2><h3 id="8-1基本语法"><a href="#8-1基本语法" class="headerlink" title="8.1基本语法"></a>8.1基本语法</h3><p>Markdown 制作表格使用 <strong>|</strong> 来分隔不同的单元格，使用 <strong>-</strong> 来分隔表头和其他行。</p><p>语法格式如下： </p><pre><code>|  表头   | 表头  ||  ----  | ----  || 单元格  | 单元格 || 单元格  | 单元格 |</code></pre><p>以上代码显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/23EACC50-38E0-4284-B99A-6BC22E284BAC.jpg" alt="img"> </p><h3 id="8-2可以设置表格的对齐方式"><a href="#8-2可以设置表格的对齐方式" class="headerlink" title="8.2可以设置表格的对齐方式"></a>8.2可以设置表格的对齐方式</h3><ul><li><strong>-:</strong> 设置内容和标题栏居右对齐。</li><li><strong>:-</strong> 设置内容和标题栏居左对齐。</li><li><strong>:-:</strong> 设置内容和标题栏居中对齐。</li></ul><p>实例如下： </p><pre><code>| 左对齐 | 右对齐 | 居中对齐 || :-----| ----: | :----: || 单元格 | 单元格 | 单元格 || 单元格 | 单元格 | 单元格 |</code></pre><p>以上代码显示结果如下： </p><p><img src="https://www.runoob.com/wp-content/uploads/2019/03/87DE9D5C-44FB-4693-8735-194D3779EC3E.jpg" alt="img"> </p><h2 id="9、高级技巧"><a href="#9、高级技巧" class="headerlink" title="9、高级技巧"></a>9、高级技巧</h2><p>目前对本人来说过于复杂，详情点击<a href="https://www.runoob.com/markdown/md-advance.html">链接</a>查看</p></u><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2020/072163785.html"/>
      <url>/2020/072163785.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h2><h3 id="对新鲜事物的好奇"><a href="#对新鲜事物的好奇" class="headerlink" title="对新鲜事物的好奇"></a>对新鲜事物的好奇</h3><p><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/%E5%8D%83%E5%8F%8D%E7%94%B0.jpg" alt=""></p><ul><li>2020年注定是不安定的一年，持续了近大半年的新冠疫情尚未完全平息，随之而来的又是泛滥的洪水猛兽。宅家半年，上着不知所云却又异常心累的网课，整个人都颓废了不少，心想着总不能半年总不能在无所事事中荒废了自己，总得开发一些新的技能，不然怎么在这飞速发展的社会中立足啊！好吧说实话，这个想法是瞎扯的。事实是，好朋友来家里玩，一起打游戏之余，了解到他最近在搭建博客，看起来好像挺有意思的，有点酷，于是便想来学习一波，同时也能对编程、网络信息技术这方面有更多的了解。（爷很好奇！)<br>附上好友的博客链接，在友情链接栏也可以看到。<br><a href="https://kangblogs.top/">Kang’s Blog</a><br><a href="https://xiaoyu.7miaoyu.com/">小鱼博客</a><h3 id="TX回收账号的导火索"><a href="#TX回收账号的导火索" class="headerlink" title="TX回收账号的导火索"></a>TX回收账号的导火索</h3><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/tx.jpg" alt="">  </li><li>想必前几周的腾讯&amp;老干妈事件闹得沸沸扬扬，大家吃瓜也吃的很高兴，对TX的印象似乎由圈钱机器变成了傻白甜。但很多人不知道的是另外一件事，就在上周，微博上大量用户反馈自己的腾讯QQ号被冻结，无法登录，显示该帐号涉嫌业务违规操作（如批量登录等）被暂时冻结，请前往安全中心查询或进行资金管理。而被冻结的大多是数字稀有的账号，即靓号（这波啊，这波是收回不充钱的靓号，再高价出售(doge）)而TX也没给出回复，只能经过繁琐的步骤解冻。不禁让我产生了一些后顾之忧。  </li><li>QQ、微信等社交软件作为当代年轻人必不可少的社交工具，在生活中的确给予了我们极大的方便，但也无形中掌握了了我们很多重要的数据，加之许多人都喜欢在空间、朋友圈分享一些自己的生活记录或重要文件，一旦账号被封，便面临着社交受阻，数据丢失，钱财损失等诸多不便。那么，为何不能搭建一个真正属于自己的领域呢？不必充值超级会员便能部署诸多华丽的背景装饰，无限制地上传文件，记录生活，分享技术，友好交流，不断进步，也不存在数据丢失或被他人冻结的情况。朋友的分享更激发了我的兴趣，没错，自建博客，真正实现“我的地盘我做主”。<h2 id="2-说干就干，开始搭建"><a href="#2-说干就干，开始搭建" class="headerlink" title="2.说干就干，开始搭建"></a>2.说干就干，开始搭建</h2><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/%E7%A9%BA.png" alt="">  <h3 id="兴致勃勃地开始"><a href="#兴致勃勃地开始" class="headerlink" title="兴致勃勃地开始"></a>兴致勃勃地开始</h3></li><li>作为一个纯小白，先前完全没有接触过博客搭建这方面的知识，对于编程的了解也仅仅停留在学校教授的鸡毛蒜皮般的C++知识上。像GIthub、Hexo、Picgo、域名等这些新鲜事物甚至闻所未闻，真的是兴奋中又带着些许畏惧，毕竟最让人害怕的就是未知的事物。  </li><li>于是开始在b站搜索教程，在百度查找相关文章，在CSDN上寻求大佬的帮助，一步一步按照教程严格执行，生怕遗漏了哪一步，或是多打了个空格导致乱码，每一步完成后都仔细查看、检验，遇到卡壳的地方便去寻求好友的帮助，毕竟有前车之鉴。在这里特向好友<a href="https://kangblogs.top/">Kang</a>表示衷心的感谢，全程协助，远程控制，没有他的协助，估计我也无法将博客搭建完成，下面稍微感受下两个小白在搭建过程中的绝望吧。<br><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/jilu1.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/jilu2.jpg" alt=""><br><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/jilu3.jpg" alt=""><h3 id="令人头疼的美化教程"><a href="#令人头疼的美化教程" class="headerlink" title="令人头疼的美化教程"></a>令人头疼的美化教程</h3></li><li>既然要打造属于自己的空间，美化当然必不可少（花里胡哨）。结果好家伙，一上来就给我干倒了，第一次使用的matery源码有点问题，导致首页背景的滤镜效果时有时无，我两小白哪能看得出，各种搜索，查资料，修改，在经历了近一天的无谓挣扎后我选择放弃。转而使用另一个看似更容易修改的Sakuraplus主题，谁成想下的文件是魔改版的，来来回回改了一天多，翻遍了文件夹修改代码，终于。。。还是改不成自己的文件（当场裂开）。<br><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/%E7%BB%9D%E6%9C%9B.png" alt="">  </li><li>最后兜兜转转还是选择了一开始的matery作为博客主题，只不过下载了一个更加详细靠谱的版本，经过仔细修改源码，终于整好了背景问题。（我特么居然在博客背景问题上卡了三四天，人傻了都~）随后便是部署各个标签页和按钮。由于部署的github仓库是国外网址，导致每次加载博客速度很慢，为了解决这个问题，又去华为云注册了个域名，身份审核又用掉了近一天时间，cdn加速的研究也用很长时间（纯小白没办法。。。）。中途还出现网页无法进入注册页面、图床链接丢失、身份审核失败等诸多问题，各种奇怪的问题都遇到了。（我裂开来）好在最后，经历了近一个星期的挣扎，博客的框架终于算是搭建好了，之后便是对内容的充实，太不容易了5555555。<h2 id="3-搭建过程中的感悟"><a href="#3-搭建过程中的感悟" class="headerlink" title="3.搭建过程中的感悟"></a>3.搭建过程中的感悟</h2></li><li>不说太多没用的，我是菜B。这方面厉害的大佬太多了，而且人都很好，愿意耐心地给我讲解，与他们的沟通让我充分认识到了自己的不足与才疏学浅，我还有很多很多要学习的地方。<h2 id="4-对未来的期望"><a href="#4-对未来的期望" class="headerlink" title="4.对未来的期望"></a>4.对未来的期望</h2></li><li>希望这个博客可以变得越来越好吧，也希望有更多的人能加入进来，一起友好交流，分享知识，共同进步。<h2 id="5-最后，感谢你能耐心看到最后"><a href="#5-最后，感谢你能耐心看到最后" class="headerlink" title="5.最后，感谢你能耐心看到最后"></a>5.最后，感谢你能耐心看到最后</h2><img src="https://cdn.jsdelivr.net/gh/IMrBobobo/TuChuang@master/data/%E8%B0%A2%E8%B0%A2.png" alt=""></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> new field </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感想 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/071916107.html"/>
      <url>/2020/071916107.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
